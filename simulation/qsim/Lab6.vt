// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2022 23:54:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU3_Block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU3_Block_vlg_sample_tst(
	A,
	B,
	Clock,
	Data_in,
	Enable,
	L1Reset,
	L2Reset,
	Reset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  Data_in;
input  Enable;
input  L1Reset;
input  L2Reset;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or Data_in or Enable or L1Reset or L2Reset or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU3_Block_vlg_check_tst (
	OP,
	RFirst,
	RLast,
	Sign,
	Student_ID,
	sampler_rx
);
input [0:15] OP;
input [0:6] RFirst;
input [0:6] RLast;
input [0:6] Sign;
input [0:6] Student_ID;
input sampler_rx;

reg [0:15] OP_expected;
reg [0:6] RFirst_expected;
reg [0:6] RLast_expected;
reg [0:6] Sign_expected;
reg [0:6] Student_ID_expected;

reg [0:15] OP_prev;
reg [0:6] RFirst_prev;
reg [0:6] RLast_prev;
reg [0:6] Sign_prev;
reg [0:6] Student_ID_prev;

reg [0:15] OP_expected_prev;
reg [0:6] RFirst_expected_prev;
reg [0:6] RLast_expected_prev;
reg [0:6] Sign_expected_prev;
reg [0:6] Student_ID_expected_prev;

reg [0:15] last_OP_exp;
reg [0:6] last_RFirst_exp;
reg [0:6] last_RLast_exp;
reg [0:6] last_Sign_exp;
reg [0:6] last_Student_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	OP_prev = OP;
	RFirst_prev = RFirst;
	RLast_prev = RLast;
	Sign_prev = Sign;
	Student_ID_prev = Student_ID;
end

// update expected /o prevs

always @(trigger)
begin
	OP_expected_prev = OP_expected;
	RFirst_expected_prev = RFirst_expected;
	RLast_expected_prev = RLast_expected;
	Sign_expected_prev = Sign_expected;
	Student_ID_expected_prev = Student_ID_expected;
end


// expected OP[ 15 ]
initial
begin
	OP_expected[15] = 1'bX;
end 
// expected OP[ 14 ]
initial
begin
	OP_expected[14] = 1'bX;
end 
// expected OP[ 13 ]
initial
begin
	OP_expected[13] = 1'bX;
end 
// expected OP[ 12 ]
initial
begin
	OP_expected[12] = 1'bX;
end 
// expected OP[ 11 ]
initial
begin
	OP_expected[11] = 1'bX;
end 
// expected OP[ 10 ]
initial
begin
	OP_expected[10] = 1'bX;
end 
// expected OP[ 9 ]
initial
begin
	OP_expected[9] = 1'bX;
end 
// expected OP[ 8 ]
initial
begin
	OP_expected[8] = 1'bX;
end 
// expected OP[ 7 ]
initial
begin
	OP_expected[7] = 1'bX;
end 
// expected OP[ 6 ]
initial
begin
	OP_expected[6] = 1'bX;
end 
// expected OP[ 5 ]
initial
begin
	OP_expected[5] = 1'bX;
end 
// expected OP[ 4 ]
initial
begin
	OP_expected[4] = 1'bX;
end 
// expected OP[ 3 ]
initial
begin
	OP_expected[3] = 1'bX;
end 
// expected OP[ 2 ]
initial
begin
	OP_expected[2] = 1'bX;
end 
// expected OP[ 1 ]
initial
begin
	OP_expected[1] = 1'bX;
end 
// expected OP[ 0 ]
initial
begin
	OP_expected[0] = 1'bX;
end 
// expected RFirst[ 6 ]
initial
begin
	RFirst_expected[6] = 1'bX;
end 
// expected RFirst[ 5 ]
initial
begin
	RFirst_expected[5] = 1'bX;
end 
// expected RFirst[ 4 ]
initial
begin
	RFirst_expected[4] = 1'bX;
end 
// expected RFirst[ 3 ]
initial
begin
	RFirst_expected[3] = 1'bX;
end 
// expected RFirst[ 2 ]
initial
begin
	RFirst_expected[2] = 1'bX;
end 
// expected RFirst[ 1 ]
initial
begin
	RFirst_expected[1] = 1'bX;
end 
// expected RFirst[ 0 ]
initial
begin
	RFirst_expected[0] = 1'bX;
end 
// expected RLast[ 6 ]
initial
begin
	RLast_expected[6] = 1'bX;
end 
// expected RLast[ 5 ]
initial
begin
	RLast_expected[5] = 1'bX;
end 
// expected RLast[ 4 ]
initial
begin
	RLast_expected[4] = 1'bX;
end 
// expected RLast[ 3 ]
initial
begin
	RLast_expected[3] = 1'bX;
end 
// expected RLast[ 2 ]
initial
begin
	RLast_expected[2] = 1'bX;
end 
// expected RLast[ 1 ]
initial
begin
	RLast_expected[1] = 1'bX;
end 
// expected RLast[ 0 ]
initial
begin
	RLast_expected[0] = 1'bX;
end 
// expected Sign[ 6 ]
initial
begin
	Sign_expected[6] = 1'bX;
end 
// expected Sign[ 5 ]
initial
begin
	Sign_expected[5] = 1'bX;
end 
// expected Sign[ 4 ]
initial
begin
	Sign_expected[4] = 1'bX;
end 
// expected Sign[ 3 ]
initial
begin
	Sign_expected[3] = 1'bX;
end 
// expected Sign[ 2 ]
initial
begin
	Sign_expected[2] = 1'bX;
end 
// expected Sign[ 1 ]
initial
begin
	Sign_expected[1] = 1'bX;
end 
// expected Sign[ 0 ]
initial
begin
	Sign_expected[0] = 1'bX;
end 
// expected Student_ID[ 6 ]
initial
begin
	Student_ID_expected[6] = 1'bX;
end 
// expected Student_ID[ 5 ]
initial
begin
	Student_ID_expected[5] = 1'bX;
end 
// expected Student_ID[ 4 ]
initial
begin
	Student_ID_expected[4] = 1'bX;
end 
// expected Student_ID[ 3 ]
initial
begin
	Student_ID_expected[3] = 1'bX;
end 
// expected Student_ID[ 2 ]
initial
begin
	Student_ID_expected[2] = 1'bX;
end 
// expected Student_ID[ 1 ]
initial
begin
	Student_ID_expected[1] = 1'bX;
end 
// expected Student_ID[ 0 ]
initial
begin
	Student_ID_expected[0] = 1'bX;
end 
// generate trigger
always @(OP_expected or OP or RFirst_expected or RFirst or RLast_expected or RLast or Sign_expected or Sign or Student_ID_expected or Student_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OP = %b | expected RFirst = %b | expected RLast = %b | expected Sign = %b | expected Student_ID = %b | ",OP_expected_prev,RFirst_expected_prev,RLast_expected_prev,Sign_expected_prev,Student_ID_expected_prev);
	$display("| real OP = %b | real RFirst = %b | real RLast = %b | real Sign = %b | real Student_ID = %b | ",OP_prev,RFirst_prev,RLast_prev,Sign_prev,Student_ID_prev);
`endif
	if (
		( OP_expected_prev[0] !== 1'bx ) && ( OP_prev[0] !== OP_expected_prev[0] )
		&& ((OP_expected_prev[0] !== last_OP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[0] = OP_expected_prev[0];
	end
	if (
		( OP_expected_prev[1] !== 1'bx ) && ( OP_prev[1] !== OP_expected_prev[1] )
		&& ((OP_expected_prev[1] !== last_OP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[1] = OP_expected_prev[1];
	end
	if (
		( OP_expected_prev[2] !== 1'bx ) && ( OP_prev[2] !== OP_expected_prev[2] )
		&& ((OP_expected_prev[2] !== last_OP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[2] = OP_expected_prev[2];
	end
	if (
		( OP_expected_prev[3] !== 1'bx ) && ( OP_prev[3] !== OP_expected_prev[3] )
		&& ((OP_expected_prev[3] !== last_OP_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[3] = OP_expected_prev[3];
	end
	if (
		( OP_expected_prev[4] !== 1'bx ) && ( OP_prev[4] !== OP_expected_prev[4] )
		&& ((OP_expected_prev[4] !== last_OP_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[4] = OP_expected_prev[4];
	end
	if (
		( OP_expected_prev[5] !== 1'bx ) && ( OP_prev[5] !== OP_expected_prev[5] )
		&& ((OP_expected_prev[5] !== last_OP_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[5] = OP_expected_prev[5];
	end
	if (
		( OP_expected_prev[6] !== 1'bx ) && ( OP_prev[6] !== OP_expected_prev[6] )
		&& ((OP_expected_prev[6] !== last_OP_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[6] = OP_expected_prev[6];
	end
	if (
		( OP_expected_prev[7] !== 1'bx ) && ( OP_prev[7] !== OP_expected_prev[7] )
		&& ((OP_expected_prev[7] !== last_OP_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[7] = OP_expected_prev[7];
	end
	if (
		( OP_expected_prev[8] !== 1'bx ) && ( OP_prev[8] !== OP_expected_prev[8] )
		&& ((OP_expected_prev[8] !== last_OP_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[8] = OP_expected_prev[8];
	end
	if (
		( OP_expected_prev[9] !== 1'bx ) && ( OP_prev[9] !== OP_expected_prev[9] )
		&& ((OP_expected_prev[9] !== last_OP_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[9] = OP_expected_prev[9];
	end
	if (
		( OP_expected_prev[10] !== 1'bx ) && ( OP_prev[10] !== OP_expected_prev[10] )
		&& ((OP_expected_prev[10] !== last_OP_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[10] = OP_expected_prev[10];
	end
	if (
		( OP_expected_prev[11] !== 1'bx ) && ( OP_prev[11] !== OP_expected_prev[11] )
		&& ((OP_expected_prev[11] !== last_OP_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[11] = OP_expected_prev[11];
	end
	if (
		( OP_expected_prev[12] !== 1'bx ) && ( OP_prev[12] !== OP_expected_prev[12] )
		&& ((OP_expected_prev[12] !== last_OP_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[12] = OP_expected_prev[12];
	end
	if (
		( OP_expected_prev[13] !== 1'bx ) && ( OP_prev[13] !== OP_expected_prev[13] )
		&& ((OP_expected_prev[13] !== last_OP_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[13] = OP_expected_prev[13];
	end
	if (
		( OP_expected_prev[14] !== 1'bx ) && ( OP_prev[14] !== OP_expected_prev[14] )
		&& ((OP_expected_prev[14] !== last_OP_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[14] = OP_expected_prev[14];
	end
	if (
		( OP_expected_prev[15] !== 1'bx ) && ( OP_prev[15] !== OP_expected_prev[15] )
		&& ((OP_expected_prev[15] !== last_OP_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[15] = OP_expected_prev[15];
	end
	if (
		( RFirst_expected_prev[0] !== 1'bx ) && ( RFirst_prev[0] !== RFirst_expected_prev[0] )
		&& ((RFirst_expected_prev[0] !== last_RFirst_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[0] = RFirst_expected_prev[0];
	end
	if (
		( RFirst_expected_prev[1] !== 1'bx ) && ( RFirst_prev[1] !== RFirst_expected_prev[1] )
		&& ((RFirst_expected_prev[1] !== last_RFirst_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[1] = RFirst_expected_prev[1];
	end
	if (
		( RFirst_expected_prev[2] !== 1'bx ) && ( RFirst_prev[2] !== RFirst_expected_prev[2] )
		&& ((RFirst_expected_prev[2] !== last_RFirst_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[2] = RFirst_expected_prev[2];
	end
	if (
		( RFirst_expected_prev[3] !== 1'bx ) && ( RFirst_prev[3] !== RFirst_expected_prev[3] )
		&& ((RFirst_expected_prev[3] !== last_RFirst_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[3] = RFirst_expected_prev[3];
	end
	if (
		( RFirst_expected_prev[4] !== 1'bx ) && ( RFirst_prev[4] !== RFirst_expected_prev[4] )
		&& ((RFirst_expected_prev[4] !== last_RFirst_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[4] = RFirst_expected_prev[4];
	end
	if (
		( RFirst_expected_prev[5] !== 1'bx ) && ( RFirst_prev[5] !== RFirst_expected_prev[5] )
		&& ((RFirst_expected_prev[5] !== last_RFirst_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[5] = RFirst_expected_prev[5];
	end
	if (
		( RFirst_expected_prev[6] !== 1'bx ) && ( RFirst_prev[6] !== RFirst_expected_prev[6] )
		&& ((RFirst_expected_prev[6] !== last_RFirst_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RFirst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RFirst_expected_prev);
		$display ("     Real value = %b", RFirst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RFirst_exp[6] = RFirst_expected_prev[6];
	end
	if (
		( RLast_expected_prev[0] !== 1'bx ) && ( RLast_prev[0] !== RLast_expected_prev[0] )
		&& ((RLast_expected_prev[0] !== last_RLast_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[0] = RLast_expected_prev[0];
	end
	if (
		( RLast_expected_prev[1] !== 1'bx ) && ( RLast_prev[1] !== RLast_expected_prev[1] )
		&& ((RLast_expected_prev[1] !== last_RLast_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[1] = RLast_expected_prev[1];
	end
	if (
		( RLast_expected_prev[2] !== 1'bx ) && ( RLast_prev[2] !== RLast_expected_prev[2] )
		&& ((RLast_expected_prev[2] !== last_RLast_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[2] = RLast_expected_prev[2];
	end
	if (
		( RLast_expected_prev[3] !== 1'bx ) && ( RLast_prev[3] !== RLast_expected_prev[3] )
		&& ((RLast_expected_prev[3] !== last_RLast_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[3] = RLast_expected_prev[3];
	end
	if (
		( RLast_expected_prev[4] !== 1'bx ) && ( RLast_prev[4] !== RLast_expected_prev[4] )
		&& ((RLast_expected_prev[4] !== last_RLast_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[4] = RLast_expected_prev[4];
	end
	if (
		( RLast_expected_prev[5] !== 1'bx ) && ( RLast_prev[5] !== RLast_expected_prev[5] )
		&& ((RLast_expected_prev[5] !== last_RLast_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[5] = RLast_expected_prev[5];
	end
	if (
		( RLast_expected_prev[6] !== 1'bx ) && ( RLast_prev[6] !== RLast_expected_prev[6] )
		&& ((RLast_expected_prev[6] !== last_RLast_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RLast[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RLast_expected_prev);
		$display ("     Real value = %b", RLast_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RLast_exp[6] = RLast_expected_prev[6];
	end
	if (
		( Sign_expected_prev[0] !== 1'bx ) && ( Sign_prev[0] !== Sign_expected_prev[0] )
		&& ((Sign_expected_prev[0] !== last_Sign_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[0] = Sign_expected_prev[0];
	end
	if (
		( Sign_expected_prev[1] !== 1'bx ) && ( Sign_prev[1] !== Sign_expected_prev[1] )
		&& ((Sign_expected_prev[1] !== last_Sign_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[1] = Sign_expected_prev[1];
	end
	if (
		( Sign_expected_prev[2] !== 1'bx ) && ( Sign_prev[2] !== Sign_expected_prev[2] )
		&& ((Sign_expected_prev[2] !== last_Sign_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[2] = Sign_expected_prev[2];
	end
	if (
		( Sign_expected_prev[3] !== 1'bx ) && ( Sign_prev[3] !== Sign_expected_prev[3] )
		&& ((Sign_expected_prev[3] !== last_Sign_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[3] = Sign_expected_prev[3];
	end
	if (
		( Sign_expected_prev[4] !== 1'bx ) && ( Sign_prev[4] !== Sign_expected_prev[4] )
		&& ((Sign_expected_prev[4] !== last_Sign_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[4] = Sign_expected_prev[4];
	end
	if (
		( Sign_expected_prev[5] !== 1'bx ) && ( Sign_prev[5] !== Sign_expected_prev[5] )
		&& ((Sign_expected_prev[5] !== last_Sign_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[5] = Sign_expected_prev[5];
	end
	if (
		( Sign_expected_prev[6] !== 1'bx ) && ( Sign_prev[6] !== Sign_expected_prev[6] )
		&& ((Sign_expected_prev[6] !== last_Sign_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[6] = Sign_expected_prev[6];
	end
	if (
		( Student_ID_expected_prev[0] !== 1'bx ) && ( Student_ID_prev[0] !== Student_ID_expected_prev[0] )
		&& ((Student_ID_expected_prev[0] !== last_Student_ID_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[0] = Student_ID_expected_prev[0];
	end
	if (
		( Student_ID_expected_prev[1] !== 1'bx ) && ( Student_ID_prev[1] !== Student_ID_expected_prev[1] )
		&& ((Student_ID_expected_prev[1] !== last_Student_ID_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[1] = Student_ID_expected_prev[1];
	end
	if (
		( Student_ID_expected_prev[2] !== 1'bx ) && ( Student_ID_prev[2] !== Student_ID_expected_prev[2] )
		&& ((Student_ID_expected_prev[2] !== last_Student_ID_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[2] = Student_ID_expected_prev[2];
	end
	if (
		( Student_ID_expected_prev[3] !== 1'bx ) && ( Student_ID_prev[3] !== Student_ID_expected_prev[3] )
		&& ((Student_ID_expected_prev[3] !== last_Student_ID_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[3] = Student_ID_expected_prev[3];
	end
	if (
		( Student_ID_expected_prev[4] !== 1'bx ) && ( Student_ID_prev[4] !== Student_ID_expected_prev[4] )
		&& ((Student_ID_expected_prev[4] !== last_Student_ID_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[4] = Student_ID_expected_prev[4];
	end
	if (
		( Student_ID_expected_prev[5] !== 1'bx ) && ( Student_ID_prev[5] !== Student_ID_expected_prev[5] )
		&& ((Student_ID_expected_prev[5] !== last_Student_ID_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[5] = Student_ID_expected_prev[5];
	end
	if (
		( Student_ID_expected_prev[6] !== 1'bx ) && ( Student_ID_prev[6] !== Student_ID_expected_prev[6] )
		&& ((Student_ID_expected_prev[6] !== last_Student_ID_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Student_ID_exp[6] = Student_ID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU3_Block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg Data_in;
reg Enable;
reg L1Reset;
reg L2Reset;
reg Reset;
// wires                                               
wire [0:15] OP;
wire [0:6] RFirst;
wire [0:6] RLast;
wire [0:6] Sign;
wire [0:6] Student_ID;

wire sampler;                             

// assign statements (if any)                          
ALU3_Block i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.Data_in(Data_in),
	.Enable(Enable),
	.L1Reset(L1Reset),
	.L2Reset(L2Reset),
	.OP(OP),
	.Reset(Reset),
	.RFirst(RFirst),
	.RLast(RLast),
	.Sign(Sign),
	.Student_ID(Student_ID)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #20000 1'b1;
	#20000;
end 

// Data_in
initial
begin
	Data_in = 1'b1;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

// L1Reset
initial
begin
	L1Reset = 1'b0;
end 

// L2Reset
initial
begin
	L2Reset = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

ALU3_Block_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.Data_in(Data_in),
	.Enable(Enable),
	.L1Reset(L1Reset),
	.L2Reset(L2Reset),
	.Reset(Reset),
	.sampler_tx(sampler)
);

ALU3_Block_vlg_check_tst tb_out(
	.OP(OP),
	.RFirst(RFirst),
	.RLast(RLast),
	.Sign(Sign),
	.Student_ID(Student_ID),
	.sampler_rx(sampler)
);
endmodule

